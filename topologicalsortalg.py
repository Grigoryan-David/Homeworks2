# -*- coding: utf-8 -*-
"""TopologicalSortAlg.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fFVPAfGPa3PpUejYOPdrNFftd7qlKKSe
"""

def topological_sort(graph):

    in_degree = {}
    for vertex in graph:
        in_degree[vertex] = 0
    for vertex in graph:
        for neighbor in graph[vertex]:
            in_degree[neighbor] = in_degree.get(neighbor, 0) + 1

    queue = []
    for vertex, degree in in_degree.items():
        if degree == 0:
            queue.append(vertex)

    sorted_order = []
    while queue:
        current_vertex = queue.pop(0)
        sorted_order.append(current_vertex)

        for neighbor in graph[current_vertex]:
            in_degree[neighbor] -= 1
            if in_degree[neighbor] == 0:
                queue.append(neighbor)

    if len(sorted_order) != len(graph):
        print("Graph contains cycle!")
        return []

    return sorted_order

graph = {
    'A': ['B', 'C'],
    'B': ['D'],
    'C': ['D'],
    'D': ['E'],
    'E': []
}

sorted_order = topological_sort(graph)

if sorted_order:
    print("Topological order:", sorted_order)