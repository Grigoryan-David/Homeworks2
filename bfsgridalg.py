# -*- coding: utf-8 -*-
"""BFSgridAlg.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ONloVmR9UY4pChe0J12_tBy0t-f3mG1Y
"""

def bfs(grid, start, target):
    rows, cols = len(grid), len(grid[0])
    visited = set()
    queue = [(start, 0)]

    while queue:
        cell, distance = queue.pop(0)
        if cell == target:
            return distance
        visited.add(cell)

        row, col = cell
        for dr, dc in [(1, 0), (-1, 0), (0, 1), (0, -1)]:
            new_row, new_col = row + dr, col + dc
            new_cell = (new_row, new_col)
            if 0 <= new_row < rows and 0 <= new_col < cols and grid[new_row][new_col] == 1 and new_cell not in visited:
                queue.append((new_cell, distance + 1))
                visited.add(new_cell)

    return -1


grid = [
    [0, 0, 0, 0, 0, 0],
    [0, 0, 1, 1, 0, 0],
    [0, 0, 0, 0, 0, 0],
    [0, 0, 0, 1, 1, 0],
    [0, 0, 0, 0, 0, 0]
]

start_point = (0, 0)
target_point = (4, 5)

distance_to_target = bfs(grid, start_point, target_point)

if distance_to_target != -1:
    print(f"Shortest distance from {start_point} to {target_point} is {distance_to_target}")
else:
    print(f"Target {target_point} is unreachable from {start_point}")